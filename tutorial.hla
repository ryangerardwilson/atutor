/*=============================================================================
                    = W e l c o m e t o t h e A T U T O R =
===============================================================================
    
Each run starts fresh if you copy from original, but hack around or die bored.
Takes 30-45 mins if you're not drooling on your keyboard. Make a copy to trash;
this one's your boot camp. Type the code, compile, feel the pain—or just read
like a wimp and wonder why your programs core dump.

Hit vim, scroll to Lesson 1.1, uncomment that shit, edit, save, compile from
terminal. Let's make you not a C poser.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                    VIM BASIC REVISION: SELECTING TEXT TO WRITE
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

        ** To save part of the file, type v motion :w FILENAME **

  1. Move the cursor to this line.

  2. Press v and move the cursor to the fifth item below. Notice that the
     text is highlighted.

  3. Press the : character. At the bottom of the screen :'<,'> will appear.

  4. Type w TEST , where TEST is a filename that does not exist yet. Verify
     that you see :'<,'>w TEST before you press <ENTER>.

  5. Vim will write the selected lines to the file TEST. Use :!ls to see it.
     Do not remove it yet! We will use it in the next lesson.

    NOTE: Pressing v starts Visual selection. You can move the cursor around
    to make the selection bigger or smaller. Then you can use an operator
    to do something with the text. For example, d deletes the text.
    QUICK TIP FOR THIS TUTOR: After uncommenting and editing a lesson's code,
    select just that uncommented block (v, move to cover it), then :w! run.c
    to dump it to run.c. Then :!gcc run.c -o run && ./run to execute it right
    in Vim. See your output or errors without leaving the editor. Efficient,
    no? Do this per lesson—keeps shit isolated, no global link-time fuckups.
*/
//
// =============================================================================
// PART I: HIGH LEVEL ASSEMBLY
// ============================================================================= 
// Lesson 1.1: HELLO, WORLD
/*
program helloWorld;
#include( "stdlib.hhf" );

begin helloWorld;
    stdout.put( "Hello, World of Assembly Language", nl );
end helloWorld;
*/







// Lesson 1.2: VARIABLES
/*
Program DemoVars;
#include( "stdlib.hhf" )

static
    InitDemo:       int32 := 5;
    NotInitialized: int32;

begin DemoVars;
    // Display the value of the pre-initialized variable:
    stdout.put( "InitDemo's value is ", InitDemo, nl );

    // Input an integer value from the user and display that value:
    stdout.put( "Enter an integer value: " );
    stdin.get( NotInitialized );
    stdout.put( "You entered: ", NotInitialized, nl );
end DemoVars;
*/




